D = cbind(-1*diag(n-1),0) + cbind(0, diag(n-1))
DtildeInv = solve(rbind(D,1))
D
D
DD
round(DD, 3)
y = c(rnorm(5,-1),rnorm(5,2))
plot(y, type='b')
n = length(y)
A = matrix(0, ncol=n, nrow=n)
A[lower.tri(A, diag = TRUE)]=1
X = A[,-1]
X
Xtild = scale(X, center = TRUE, scale = FALSE)
Xtild
Xtild
t(Xtild)%*% Xtild
Xtild
X
apply(X,2,mean)
n=5
A = matrix(0, ncol=n, nrow=n)
A[lower.tri(A, diag = TRUE)]=1
X = A[,-1]
X
apply(X,2,mean)
scale(X)
scale(X, scale=FALSE)
library(lassoshooting)
D
A
X
a = scale(X, scale = FALSE)
a
t(a)%*% a
sum(diag(a))
a
sum(abs(diag(a)))
t(a)%*%a
sum(diag(t(a)%*%a))
Xtild
dim(Xtild)
ncol(Xtild)
X
A = matrix(0, ncol=n, nrow=n)
A[lower.tri(A, diag = TRUE)]=1
X = A[,-1]
X
apply(X,2,mean)
y = c(rnorm(5,-1),rnorm(5,2))
plot(y, type='b')
n = length(y)
A = matrix(0, ncol=n, nrow=n)
A[lower.tri(A, diag = TRUE)]=1
X = A[,-1]
Xtild = scale(X, center = TRUE, scale = FALSE)
Ytild = y-mean(y)
coef= lassoshooting(X = Xtild, y=Ytild, lambda=.5)$coef
coef = c(mean(y)-apply(X,2,mean)%*%coef, coef)
FL = SoftThres(c(A %*% coef), 1)
library(lassoshooting)
library(flsa)
SoftThres = function(vec, l){
return(sapply(vec, FUN=function(x){  max(abs(x)-l, 0)*sign(x) }))
}
# small example using change of basis:
y = c(rnorm(5,-1),rnorm(5,2))
plot(y, type='b')
n = length(y)
A = matrix(0, ncol=n, nrow=n)
A[lower.tri(A, diag = TRUE)]=1
X = A[,-1]
Xtild = scale(X, center = TRUE, scale = FALSE)
Ytild = y-mean(y)
coef= lassoshooting(X = Xtild, y=Ytild, lambda=.5)$coef
coef = c(mean(y)-apply(X,2,mean)%*%coef, coef)
FL = SoftThres(c(A %*% coef), 1)
lines(FL, col="blue", lwd=2)
FLSA = flsa(y = y, lambda1 = 1, lambda2 = .5)
lines(c(FLSA), col='red', lwd=3, lty=2)
length(coef)
length(y)
y = c(rnorm(5,-1),rnorm(5,2))
plot(y, type='b')
n = length(y)
A = matrix(0, ncol=n, nrow=n)
A[lower.tri(A, diag = TRUE)]=1
X = A[,-1]
Xtild = scale(X, center = TRUE, scale = FALSE)
Ytild = y-mean(y)
coef= lassoshooting(X = Xtild, y=Ytild, lambda=1.5)$coef
coef = c(mean(y)-apply(X,2,mean)%*%coef, coef)
FL = SoftThres(c(A %*% coef), 1)
lines(FL, col="blue", lwd=2)
FLSA = flsa(y = y, lambda1 = 1, lambda2 = 1.5)
lines(c(FLSA), col='red', lwd=3, lty=2)
Xtild
X
A
y = c(rnorm(5,-1),rnorm(5,2))
plot(y, type='b')
n = length(y)
A = matrix(0, ncol=n, nrow=n)
A[lower.tri(A, diag = TRUE)]=1
X = A[,-1]
Xtild = scale(X, center = TRUE, scale = FALSE)
Ytild = y-mean(y)
coef= lassoshooting(X = Xtild, y=Ytild, lambda=1.5)$coef
coef
y = c(rnorm(5,-1),rnorm(5,2))
plot(y, type='b')
n = length(y)
A = matrix(0, ncol=n, nrow=n)
A[lower.tri(A, diag = TRUE)]=1
X = A[,-1]
Xtild = scale(X, center = TRUE, scale = FALSE)
Ytild = y-mean(y)
coef= lassoshooting(X = Xtild, y=Ytild, lambda=1.5)$coef
coef
coef = c(mean(y)-apply(X,2,mean)%*%coef, coef)
coef
coef= lassoshooting(X = Xtild, y=Ytild, lambda=1.5)$coef
coef
apply(X,2,mean)
apply(X,2,mean) %*% coef
A
A
t(Xtild)%*%Xtild
diag(t(Xtild)%*%Xtild)
sum(diag(t(Xtild)%*%Xtild))
eigen(matrix(rnorm(9), ncol=3))$values
eigen(matrix(rnorm(9), ncol=3))$values
eigen(matrix(rnorm(9), ncol=3))$values
eigen(matrix(rnorm(9), ncol=3))$values
eigen(matrix(rnorm(9), ncol=3))$values
eigen(matrix(rnorm(9), ncol=3))$values
eigen(matrix(rnorm(9), ncol=3))$values
S = matrix(.5, ncol=3, nrow=3)
S
diag(S)=1
S
eigen(S)
D
D = t(Xtild)
D = t(Xtild)%*%Xtild
D
eigen(D)
n=5
A = matrix(0, ncol=n, nrow=n)
A[lower.tri(A, diag = TRUE)]=1
X = A[,-1]
Xtild = scale(X, center = TRUE, scale = FALSE)
D = t(Xtild)%*%Xtild
D
eigen(D)
1/0.371748
1/0.1381966
seq(1,5)
5-seq(1,5)
seq(1,5)*seq(5,1)
seq(1,10)
max(5-seq(1,10), seq(10,1))
5-seq(1,10)
seq(10,1)
n
1/n
D
n=10
A = matrix(0, ncol=n, nrow=n)
A[lower.tri(A, diag = TRUE)]=1
X = A[,-1]
Xtild = scale(X, center = TRUE, scale = FALSE)
eigen(t(Xtild)%*%Xtild)
n = 11
A = matrix(0, ncol=n, nrow=n)
A[lower.tri(A, diag = TRUE)]=1
X = A[,-1]
Xtild = scale(X, center = TRUE, scale = FALSE)
eigen(t(Xtild)%*%Xtild)
n = 100
A = matrix(0, ncol=n, nrow=n)
A[lower.tri(A, diag = TRUE)]=1
X = A[,-1]
Xtild = scale(X, center = TRUE, scale = FALSE)
Ytild = y-mean(y)
max(eigen(t(Xtild)%*%Xtild)$values)
Xtild
n=10
y = c(rnorm(5,-1),rnorm(5,2))
plot(y, type='b')
n = length(y)
A = matrix(0, ncol=n, nrow=n)
A[lower.tri(A, diag = TRUE)]=1
X = A[,-1]
Xtild = scale(X, center = TRUE, scale = FALSE)
Xtild
y
t(Xtild)%*%y
t(Xtild)
y
cumsum(rev(y))
cumsum(rev(y))
y
cumsum(rev(y[1:(length(y)-1)]))
cumsum(rev(y[2:(length(y))]))
y
y[2:]
y[2:lengt(y)]
y[2:length(y)]
y
Us = cumsum(rev(y[2:length(y)]))
Us
Xtild
t(Xtild)
Ls = cumsum(y[1:(length(y)-1)])
Us
Ls
seq(1, n-1)
Us
y
sum(y)
sum(y[2:length(y)])
rev(cumsum(rev(y[2:length(y)])))
cumsum(y[2:length(y)])
Us = rev(cumsum(rev(y[2:length(y)]))) * seq(1, n-1)
length(Us)
Us
Us = rev(cumsum(rev(y[2:length(y)]))) * seq(1, n-1)/n
Us
sum(y[2:9])
length(y)
sum(y[2:10])/n
sum(y[3:10])/n
sum(y[3:10])/n*2
sum(y[4:10])/n*3
cumsum(y[1:(length(y)-1)])
y
Ls = cumsum(y[1:(length(y)-1)]) * seq(n-1,1)/n
Us - Ls
t(Xtild)%*%y
t(Xtild)%*%y - (Us -Ls)
A
length(y)
A%*%y
A%*%y - cumsum(y)
t(Xtild)%*%y
t(Xtild)%*%y - (Us - Ls)
Us = rev(cumsum(rev(y[2:length(y)]))) * seq(1, n-1)/n
Ls = cumsum(y[1:(length(y)-1)]) * seq(n-1,1)/n
t(Xtild)%*%y - (Us - Ls)
Xtild
y
seq(n-1,1)
seq(n-1,1)*y
length(y)
y = y[1:9]
seq(n-1,1)*y
rev(seq(n-1,1)*y)
sum(seq(n-1,1)*y)
cumsum(rev(seq(n-1,1)*y))
rev(cumsum(rev(seq(n-1,1)*y)))
Xtild %*% y
Xtild
Us = c(rev(cumsum( rev(seq(n-1,1)*y))),0)/n
Ls = c(0, cumsum( seq(1,n-1)*y))/n
length(Us)
Us + Ls
Us + Ls - Xtild%*%y
-Us + Ls - Xtild%*%y
Xtild %*% y -(Ls - Us) # our answer
length(y)
n
Xtild
Us = c(rev(cumsum( rev(seq(n-1,1)*y))),0)/n
Ls = c(0, cumsum( seq(1,n-1)*y))/n
Xtild %*% y -(Ls - Us) # our answer
n
length(y)
matrix(1/4, ncol=2, nrow=2)
det(matrix(1/4, ncol=2, nrow=2))
det(matrix(1/4, ncol=2, nrow=1))
A = matrix(.25, ncol=2, nrow=2)
A
A[2,1]
A[2,1]=-.25
A
det(A)
B = matrix(1, ncol=2, nrow=2)
B
B[1,2] = -1
B
det(B)
A = matrix(.5, ncol=2, nrow=2)
A[2,1]=-.5
A
det(A)
rm(list=ls())
gc()
X = matrix(rnorm(9), ncol=3)
X
svd(X)
X = X+t(X)
X
svd(X)
det(X)
diag(X) = abs(diag(X))
det(X)
X
svd(X)
A = svd(X)
A$u %*% diag(A$d) %*% A$v
A$u %*% diag(A$d) %*% A$v - X
A$u %*% diag(A$d) %*% t(A$v) - X
A
A
A$u
X
A$u
A$d
A$d[2] = .5
A$u %*% diag(A$d) %*% t(A$v) - X
A$u %*% diag(A$d) %*% t(A$v)
X
A$d
A$d[1]=.6
A$d
A$u %*% diag(A$d) %*% t(A$v)
X
?rgamma
hist(rgamma(500, shape = 1.5, scale = 1.5))
rm(list=ls())
gc()
library(MASS)
data = mvrnorm(50, rep(0,5), diag(5))
dim(data)
n = nrow(data) # number of obs
tau = rep(1/n,n) # latent parameter
mu = apply(data,2,mean)
muy
mu
p = ncol(data) # dimensionality of the data
Sigma = cov(data)
Sigma
rho=1
Pres = glass(Sigma, rho=rho)
library(glasso)
Pres = glasso(Sigma, rho=rho)
Pres = glasso(Sigma, rho=rho)$wi
Pres
1/(Sigma[1,1]+1)
PresOld = Pres # for convergence reasons
data[5,1]
data[5,1]= data[5,1]*10
head(data)
hist(data[,1])
apply(data, 1, FUN=function(x){  t(x-mu)%*%Pres%*%(x-mu)         })
v=3
tau = apply(data, 1, FUN=function(x){  (v+p)/(v+t(x-mu)%*%Pres%*%(x-mu)) })
tau
hist(tau)
hist(tau, breaks=10)
summary(tau)
tau = rep(0, 50)
tau[1]=1
tau
t(tau)%*%data
(tau)%*%data
(tau)%*%t(data)
t(tau)%*%t(data)
dim(data)
tau*data
sum(ta)
sum(tau)
tau = apply(data, 1, FUN=function(x){  (v+p)/(v+t(x-mu)%*%Pres%*%(x-mu)) }) # E step
sum(tau)
mu = apply(tau*data, 2, sum)/ sum(tau)
mu
tau*data
(tau*data)[5,]
tau[5]*data[5,]
(tau*data)[45,]
tau[45]*data[45,]
tau[45]
data
head(data)
mu
head(data-mu)
data[2,]-mu
?sweep
sweep(data, MARGIN=2, mu)
head(sweep(data, MARGIN=2, mu))
data[2,]-mu
data[6,]-mu
S = cov( sqrt(tau)*head(sweep(data, MARGIN=2, mu)))
S = cov( sqrt(tau)*sweep(data, MARGIN=2, mu))
S
Pres
PresOld
PresOld - Pres
sum((Pres-PresOld)**2)
iter = 0
print(iter)
rm(list=ls())
gc()
Sigma = diag(5)
Sigma = diag(5)
Sigma[1,2] = Sigma[2,1] = .6
data = mvrnorm(50, rep(0,5), Sigma)
cov(data)
data[5,] = -5*data[5,]
cov(data)
data[5,]
plot.ts(data)
set.seed(1)
Sigma = diag(5)
Sigma[1,2] = Sigma[2,1] = .6
data = mvrnorm(50, rep(0,5), Sigma)
data[30,] = -5*data[30,]
plot.ts(data)
cov(data)
data[30,]
## Tlasso algorithm
#
# for details see:
# http://projecteuclid.org/euclid.aoas/1310562216
#
#
library(MASS)
library(glasso)
tlasso = function(data, rho, v){
# based on: http://projecteuclid.org/euclid.aoas/1310562216
#
# INPUT:
#      - data: data matrix
#      - rho: regularisation parameter
#      - v: degrees of freedom in t distribution (assumed known)
# initialisation:
n = nrow(data) # number of obs
p = ncol(data) # dimensionality of the data
tau = rep(1/n,n) # latent parameter
mu = apply(data,2,mean) # mean vector (initial estimate)
Sigma = cov(data) # covariance, initial estimate
Pres = glasso(Sigma, rho=rho)$wi
PresOld = Pres # for convergence reasons
conv = FALSE
iter = 0
# iteration:
while(conv==FALSE & iter < 50){
tau = apply(data, 1, FUN=function(x){  (v+p)/(v+t(x-mu)%*%Pres%*%(x-mu)) }) # E step
mu = apply(tau*data, 2, sum)/ sum(tau) # M step for mean
S = cov( sqrt(tau)*sweep(data, MARGIN=2, mu))
Pres = glass(S, rho=rho)$wi
if ( sum((Pres-PresOld)**2) < 0.1){
conv = TRUE
} else {
print(iter)
iter = iter + 1
PresOld = Pres
}
}
return(list(tau=tau, Pres=Pres))
}
X = tlasso(data = data, rho = .5, v = 3)
rm(list=ls())
gC()
gc()
source('/media/1401-1FFE/Documents/Miscelaneous/EM/tlasso/tlasso.R', echo=TRUE)
X
X$tau[30]
hist(X$tau, breaks=10)
min(X$tau)
source('/media/1401-1FFE/Documents/Miscelaneous/EM/tlasso/tlasso.R', echo=TRUE)
X$tau
X$Pres
X = tlasso(data = data, rho = .25, v = 3)
X
glasso(cov(data), rho = .25)$wi
glasso(cov(data), rho = .275)$wi
glasso(cov(data), rho = .375)$wi
set.seed(1)
Sigma = diag(5)
Sigma[1,2] = Sigma[2,1] = .6
data = mvrnorm(50, rep(0,5), Sigma)
data[30,] = -5*data[30,]
data[40,] = 2.5*data[40,]
X = tlasso(data = data, rho = .25, v = 3)
X$tau
seq(1,50)[order(X$tau)]
X$Pres
glasso(cov(data), rho=.3)$wi
rm(list=ls())
gc()
library(SINGLE)
setwd('/media/1401-1FFE/Documents/Dynamic Covariance Estimation/Kernel Smoothing/Reviewer Comments/pySINGLE/Sample Data/')
data = read.csv('biggerdata.csv')
dim(data)
head(data)
?choose_h
choose_h(data=data, sample_size = nrow(data), h = c(5,10,15))
choose_h(data=data, sample_size = nrow(data)-1, h = c(5,10,15))
class(data)
data = as.matrix(data)
choose_h(data=data, sample_size = nrow(data)-1, h = c(5,10,15))
choose_h
choose_h(data=data, sample_size = nrow(data), h = c(5,10,15))
S = SINGLE(data = data, h = 15, l1 = 0.55, l2=.5)
?plotSINGLE
plotSINGLE(S, index = c(2,3,7,8))
S2 = SINGLE(data = data, h = 15*15, l1 = 0.55, l2=.5)
plotSINGLE(S2, index = c(2,3,7,8))
S2 = SINGLE(data = data, h = 15*15, l1 = 0.55, l2=5)
plotSINGLE(S2, index = c(2,3,7,8))
